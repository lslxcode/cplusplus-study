#pragma once
#include <vector>
#include <queue>
#include <atomic>
#include <stdexcept>
#include <condition_variable>
#include <thread>
#include <functional>
#include <future>
//所有对象的初始化方式均采用了{}，而不再使用() 方式，因为风格不够一致且容易出错

namespace std {
#define MAX_NUM_THREADPOOL 8

class threadpool {
	/*
	简化了 typedef 的用法。
	function<void()> 可以认为是一个函数类型，接受任意原型是 void() 的函数，或是函数对象，或是匿名函数。
	void() 意思是不带参数，没有返回值。
	*/
	using Task = function<void()>; //定义类型
	vector<thread> _pool;          //线程池
	queue<Task> _tasks;           //任务队列
	mutex _lock;                  //同步
	condition_variable _cond;     //条件阻塞
	atomic<bool> _run{ true };    //线程池是否执行
	atomic<int> _idleNum{ 0 };   //空闲线程数量

public:
	threadpool(int size = 4) { addThread(size); };
	~threadpool() {
		_run = false;
		/// <summary>
		/// condition_variable cv; 条件变量， 需要配合 unique_lock 使用；
		/// unique_lock 相比 lock_guard 的好处是：可以随时 unlock() 和 lock()。 
		/// cv.wait() 之前需要持有 mutex，
		/// wait 本身会 unlock() mutex，如果条件满足则会重新持有 mutex。
		/// </summary>
		_cond.notify_all();
		for (auto& th : _pool) {
			//th.detach(); // 让线程“自生自灭”
			if (th.joinable()) {
				/// <summary>
				/// 最后线程池析构的时候,join() 可以等待任务都执行完在结束,很安全!
				/// </summary>
				th.join();
			}
		}
	}

public:
	/// <summary>
	/// commit 方法是不是略奇葩！可以带任意多的参数，第一个参数是 f，后面依次是函数 f 的参数
	/// (注意:参数要传struct/class的话,建议用pointer,小心变量的作用域)！ 
	/// 可变参数模板是 c++11 的一大亮点，够亮！至于为什么是 Arg… 和 arg… ，因为规定就是这么用的！
	/// </summary>
	template<class F,class... Args>
	auto commit(F&& f, Args&&... args) ->future<decltype(f(args...))>
	{
		if (!_run) {
			throw runtime_error("commit on threadpool is stopped");
		}
		/// <summary>
		/// delctype(expr) 用来推断 expr 的类型，和 auto 是类似的，相当于类型占位符，
		/// 占据一个类型的位置；auto f(A a, B b) -> decltype(a+b) 是一种用法，
		/// 不能写作 decltype(a+b) f(A a, B b)，为啥？！ c++ 就是这么规定的！
		/// </summary>
		using retType = decltype(f(args...));


		/// <summary>
		/// commit 直接使用智能调用stdcall函数，但有两种方法可以实现调用类成员，
		/// 一种是使用 bind： .commit(std::bind(&Dog::sayHello, &dog))； 
		/// 一种是用 mem_fn： .commit(std::mem_fn(&Dog::sayHello), &dog)；
		/// </summary>
		/// make_shared 用来构造 shared_ptr 智能指针。
		/// 用法大体是 shared_ptr p = make_shared(4) 然后 *p == 4 。
		/// 智能指针的好处就是， 自动 delete ！
		auto task = make_shared<packaged_task<retType()>>(
			/// <summary>
			/// bind 函数，接受函数 f 和部分参数，返回currying后的匿名函数，
			/// 譬如 bind(add, 4) 可以实现类似 add4 的函数！
			/// forward() 函数，类似于 move() 函数，后者是将参数右值化，前者是… 肿么说呢？
			/// 大概意思就是：不改变最初传入的类型的引用类型(左值还是左值，右值还是右值)；
			/// </summary>
			bind(forward<F>(f),forward<Args>(args)...)
			);
		/// <summary>
		/// packaged_task 就是任务函数的封装类，通过 get_future 获取 future ， 
		/// 然后通过 future 可以获取函数的返回值(future.get())；
		/// </summary>
		future<retType> future = task->get_future();
		{
			lock_guard<mutex> lock{ _lock };
			_tasks.emplace([task]() {
				(*task)();
			});
		}
		_cond.notify_one(); // 唤醒一个线程执行

		return future;
	}

	//空闲线程数量
	int idlCount() { return _idleNum; }
	//线程数量
	int thrCount() { return _pool.size(); }

	//添加指定数量的线程
	void addThread(unsigned short size)
	{
		for (; _pool.size() < MAX_NUM_THREADPOOL && size > 0; --size)
		{   //增加线程数量,但不超过 预定义数量 THREADPOOL_MAX_NUM

			/// <summary>
			/// pool.emplace_back([this]{…}) 和 pool.push_back([this]{…}) 功能一样，
			/// 只不过前者性能会更好
			//	构造了一个线程对象，执行函数是拉姆达匿名函数 ；
			/// 匿名函数： [this]{…} 不多说。[] 是捕捉器，this 是引用域外的变量 this指针， 
			/// 内部使用死循环, 由_cond.wait(lock,[this]{…}) 来阻塞线程；
			/// </summary>
			_pool.emplace_back([this] { //工作线程函数
				while (_run)
				{
					Task task; // 获取一个待执行的 task
					{
						// unique_lock 相比 lock_guard 的好处是：可以随时 unlock() 和 lock()
						///lock_guard 是 mutex 的 stack 封装类，构造的时候 lock()，析构的时候 unlock()，
						///是 c++ RAII 的 idea；
						unique_lock<mutex> lock{ _lock };

						_cond.wait(lock, [this] {
							return !_run || !_tasks.empty();
						}); // wait 直到有 task
						if (!_run && _tasks.empty())
							return;
						task = move(_tasks.front()); // 按先进先出从队列取一个 task
						_tasks.pop();
					}
					_idleNum--;
					task();//执行任务
					_idleNum++;
				}
			});
			_idleNum++;
		}
	}

};

}
